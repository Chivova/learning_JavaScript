/*

// 1. У каждого обьекта есть свойство __proto__
// 2. В этом свойстве лежит ссылка на его ПРОТОТИП, то есть другой обьект
// 3. При создании литера обьекта, в свойство __proto__ записывается ссылка на Функция.prototype
// 4. Функция-конструктор это просто функция :)
// 5. Всю магию делает оператор new
// 6. Если функция вызывается через new, создаётся пустой объект
// 7. Функция вызывается в контексте созданного объекта
// 8. В свойство this.__proto__ записывается ссылка на обьект Функция.prototype
// 9. Ссылка на обьект возвращается в место вызова new Фунукция()

 * Основы ООП: класс, экземпляр (объект), интерфейс
Класс — способ описания сущности, определяющий состояние и поведение, зависящее от этого состояния,
    а также правила для взаимодействия с данной сущностью (контракт). В нашем случае, класс описывает сущность – автомобиль.
    Свойствами класса будут двигатель, колеса, фары и т. д. Методами класса будут открыть дверь, завести двигатель,
    увеличить скорость и т. п.

Объект (экземпляр) — это отдельный представитель класса, имеющий конкретное состояние и поведение, полностью определяемое
классом. Это то, что создано по чертежу, то есть по описанию из класса. Говоря простым языком, объект имеет конкретные
значения свойств и методы, работающие с этими свойствами на основе правил, заданных в классе. В данном примере,
если класс это некоторый абстрактный автомобиль на чертеже, то объект — это конкретный автомобиль, стоящий у нас под окнами.

Интерфейс — это набор свойств и методов класса, доступных для использования при работе с экземпляром.
По сути, интерфейс специфицирует класс, чётко определяя все возможные действия над ним. Хороший пример интерфейса —
приборная панель автомобиля, которая позволяет вызвать такие методы как увеличение скорости, торможение, поворот,
переключение передач, включение фар и т. п.
 */

/*
 * Функции-конструкторы

Любая функция, кроме стрелочной, может быть использована как конструктор, то есть вызвана при помощи оператора new.
При вызове стрелки через new будет ошибка.
 * - Именование --> функция-конструктор - самая обычная функция, но ЕЕ ИМЯ должно быть с большой буквы и
    существительное в одном числе, не отвечает на вопрос что делать
 * - Оператор new --> функция к которой применили оператор new. Это приводит к созданию нового объекта и вызову
    функции в контексте этого объекта.
 * - Свойство Function.prototype
 */

// const Car = function (value = {}) {
//   // 2. Функция вызывается в контексте созданного объекта,
//   //    то есть в this записывается ссылка на него
//   console.log('this:', this);
//   this.a = value;

//   // 3. В свойство this.__proto__ записывается ссылка на обьект Car.prototype
//   //    тоесть Car.prototype это ПРОТОТИП будущего обьекта (экземпляра)

//   // 4. Ссылка на обьект возвращается в место вызова new Car
// }; //

// // 1. Если функция вызывается через new, создаётся пустой объект
// const myCar = new Car(5); // вызов функции Car через оператор  new -->
// // --> создается обьект экземпляра класса Car, возвращается ссылка этот обьект и записывается в myCar
// console.log(myCar);

// const myCar2 = new Car(10);
// console.log(myCar2);

// const myCar3 = new Car(); // если не передать аргумент выдаст ошибку с undefined, поэтому в параметре функции Car лучше
// // добавить значение поумолчанию, в данном примере можно добавить {} чтобы хоть возвращало пустой обьект
// console.log(myCar3);

/* 1. Создается пустой обьект
2. Функция Car вызывается в контексте этого пустого обьекта
3. Ей передаются как аргументом обьект { brand: 'Audi', model: 'Q3', price: 35000 }
4. this внутри функции Car во время ее вызова ссылается на тот пустой обьект
5.В myCar возвращается(лежит) ссылка на ново-созданный экземпляр(обьект)
*/

const Car = function ({ brand, model, price } = {}) {
  //    const { brand, model, price } = param; // или сразу записать в пераметры
  this.brand = brand;
  this.model = model;
  this.price = price;
};

const myCar1 = new Car({ brand: 'Audi', model: 'Q3', price: 35000 });
console.log(myCar1);

const myCar2 = new Car({ brand: 'VW', model: 'Golf', price: 25000 });
console.log(myCar2);

const myCar3 = new Car({ brand: 'Audi', model: 'X6', price: 50000 });
console.log(myCar3);

const myCar4 = new Car({ brand: 'Ford', model: 'Fusion', price: 45000 });
console.log(myCar4);

const myCar5 = new Car({ brand: 'Audi', model: 'A6', price: 65000 });
console.log(myCar5);
