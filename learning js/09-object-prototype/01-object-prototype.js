/*
 * Прототип объекта
 *
 * - https://miro.com/app/board/o9J_ku0WE0g=/
 *
 * - Object.create() - Для того чтобы правильно задать прототип объекта, можно использовать метод Object.create(obj),
 * передав параметром obj ссылку на объект который мы хотим сделать прототипом для создаваемого объекта.
 *
 * - [[Prototype]] и __proto__ - В спецификации свойство __proto__ обозначено как [[Prototype]], в консоли оно отображается как __proto__.
 *
 * - Object.getPrototypeOf()- плохая практика (заставить перезаписать прототип динамически "на лету")
 *
 * - Собственные свойства и Object.prototype.hasOwnProperty() - возвращает true, если свойство prop принадлежит самому
 * объекту obj, а не его прототипу, иначе false
 *
 * - Цепочка прототипов
 */

/* const objC = {
  z: 5,
};

const objB = Object.create(objC); // создается новый пустой обьект, у которого прототипом будет objC
objB.y = 10;

const objA = Object.create(objB);
objA.x = 8;

console.log(objA.x); // собственное свойство обьекта
console.log(objA.z); // получаем значение свойства z с обьекта objC
console.log(objA.hasOwnProperty('z')); // false - так как это не его собственное свойство, а objC
console.log(objA.hasOwnProperty('x')); // true
console.log(objA.property); // undefined - по всей цепочке прототипов нет такого свойства */

//  'Это собственное свойство объекта'
//  'Это свойство на объекте-прототипе'
const dummyObj = Object.create({ message: 'Это свойство объекта протортипа' });
// dummyObj.message = 'Это собственное свойство объекта';
console.log('dummyObj', dummyObj);

console.log(dummyObj.message);

/*
 * Алгоритм поиска свойства в цепочке прототипов:
 * 1. Поиск начинается в собственных свойствах
 * 2. Если свойства нет в сообственных, поиск переходит к цепочке прототипов
 * 3. Поиск прекращается при первом совпадении (есть такое свойство)
 * 4. Возвращается значение свойства
 * 5. Если не находит --> В конце этой цепочки находится null --> если интерпретатор доберется до конца цепочки и не найдет
 * свойства с таким ключом, то вернет undefined
 */
