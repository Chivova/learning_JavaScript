 /*
    * Оператор ветвления if
   if - логический оператор
    */

// запись
    
// if (выражение которое приведится к true or false) { 
//     тело (выполняется только если выполняется if)
// }
// if (true) - тело выполняется
// if (false) - тело не выполняется, а выполняется код дальше 
// Буквально ожно сказать ----- если да выполняй тело, если нет не выполняй тело

if (true) { 
    console.log('Вывожу условие');
}

console.log('Дальше');

if (false) { 
    console.log('не вывожу условие');
}

console.log('Дальше');

if (20 < 40) { 
    console.log('20 < 40 ');
} 
console.log('Таки меньше');

/*
 * Оператор ветвления if...else - елси ДА, товыводишь тело, в противном случае выводишь это
 */

const x = 10;
const y = 15;

if (x > y) {
    console.log('x > y');
} else {
    console.log('x < y');
}


/*
 * Оператор ветвления else...if множественное условие из которого должно выполнится только одно
 else if может быть сколько угодно, а else только ОДИН
 */

const salary = 2000;

if (salary <= 500) {
    console.log('Ваш уровень 1');
} else if (salary > 500 && salary <= 1000) {
    console.log('Ваш уровень 2');
} else if (salary >= 1500 && salary <= 2000) {
    console.log('Ваш уровень 3');
} else { 
    console.log('Ваш уровень 4');
}

/*
 * Тернарный оператор используется в простых случаях в записи переменную по условии (если есть  только 2 варианта или или)
 */
const balance = 1000;
// let message;

// if (balance >= 0) {
//     message = 'Позитивный баланс';
// } else {
//     message = 'Негативный баланс';
// }
//     console.log(message);
    // Что бы не расписывать простой случай, можно записать иначе:
    // const message = условие ? выражение1 : выражение2;
    // если true -----> в переменную запишится первое выражение, а если  false----->второе выражение

const message = balance >= 0 ? 'Позитивный баланс' : 'Негативный баланс';
// const message = balance >= 0 ? true : false;

 console.log(message);

 /*
 * Блочная область видимости переменных
 */
// Два вида видимости переменных глобальное и блочное
// Глобальные переменные могут быть доступны в других блоках { } ----> такие кавычки и есть блок

 // let message; -----> глобально обьявленная переменная
// if (balance >= 0) {
//     message = 'Позитивный баланс'; -----> доступна в блоке
// } else {
//     message = 'Негативный баланс'; -----> доступна в блоке
// }

// Блочная переменная может быть доступна только в блоке, вызвать за пределами нельзя
// Правельно :
// if (true) {
//   const a = 5;
//   console.log(a);
// }

// Не правильно:
// if (true) {
//   const a = 5;
// }
//  console.log(a); ----> вывод за пределами блока (выдаст ошибку)


// Обьявлены и вызваны соседних блоках так же будут выдавать ошибку
//  if (true) {
//   const a = 5;
//   console.log(b);
// }

// if (true) {
//   const b = 10;

//   console.log(a);
// }