/*
 * Операция spread (распыление)
 * - Array.prototype.concat() и аналог через spread
 *  spread, распыление. Позволяет распылить коллекцию элементов в другую коллекцию, 
 * сделав копию оригинальной не изменяя ее. При этом, во время распыления, если элемент коллекции примитив - 
 * создается копия элемента, в случае сложного типа создается ссылка на оригинальный элемент.
 * Распыляются только итерируемые обьекты (строки, массивы, обьекты)
 */

// const numbers = [1, 2, 3].concat([4, 5, 6], [7, 8, 9]);
// console.log(numbers);

// Через метод concat это старый синтаксис, есть более современныый метод это spread(распыление)
// Например на базе одной коллекции можно создать другую
const numbers = [...[1, 2, 3], ...[4, 5, 6], ...[7, 8, 9]];
// создается новый массив, и через ... распыляется массивы [1, 2, 3] ...[4, 5, 6], ...[7, 8, 9] в который создается
console.log(numbers);

// распыление может быть в люом месте
const newNumbers = [4, 5, 6, ...[1, 2, 3], 6, 10];
// буквально массив [1, 2, 3] распыляется в массив newNumbers
console.log(newNumbers);
// Если при распылении лежит примитив создается копия, если сложные типы (обьект, массивы)  ставит туда  ссылку

/*
 * Поиск самой маленькой или большой температуры (числа)
 */
const temps = [18, 14, 12, 21, 17, 29, 24];

// Math.min(); ищет найменьшее число
// Math.max(); ищет найбольшее число
// методы Math.min() и Math.max()  ожидаеют несколько аргументов, а не массив.Если передать просто массив,
// получим NaN, потому эти методы не умеют работать с массивом
// В данном случае нам поможет операция распыления, чтобы передать элементы массива отдельными аргументами при вызове функции.
console.log(Math.min(...temps));
console.log(Math.max(...temps));
// Распыление (разпаковует) буквально под капотам делает вот так Math.min(18, 14, 12, 21, 17, 29, 24). Из массива получаются 
// отдельно независимые значения(на аргументы)

// Копия и Ссылка в распылении
// Для преметивов Копия
// const a = [1, 2, 3];
// const b = [...a]; // делается копия элементов массива а (массив а распаковался в массив b), то есть элементы были скопированы в массив b
// console.log(b === a); // false 

// // Для сложных типов ссылка
// const c = [{ x: 1, y: 2, z: 3 }];
// const d = [...c];
// console.log('c: ', c);
// console.log('d: ', d);

// console.log(c[0] === d[0]);  // true ---> элементы по индексу равны (лежит ссылка на один и тот же обьект)
// console.log(c === d); // false ---> сами массивы нее равны

// c[0].x = 100; // перезапишитвся и в массиве с и в массиве d

// console.log('c: ', c);
// console.log('d: ', d);

/*
 * Сшиваем несколько массивов в один через concat() и spread
 */
const lastWeekTemps = [1, 2, 3];
const currentTemps = [4, 5, 6];
const nextWeekTemps = [7, 8, 9];

// const allTemps = lastWeekTemps.concat(currentTemps, nextWeekTemps);

const allTemps = [...lastWeekTemps, ...currentTemps, ...nextWeekTemps];
console.log(allTemps);
// Важен порядок, так как будешь распилять массив так и будет запись
// const allTemps = [...currentTemps, ...lastWeekTemps, ...nextWeekTemps];
// console.log(allTemps);

/*
 * Распыление объектов
 * - Object.prototype.assign() и spread
 */

// const a = { x: 1, y: 2 };
// const b = { x: 0, z: 3 };
// // Раньше запись выглядела вот так:
// const c = Object.assign({}, a, b); // { } - цель куда распылять, дальше в каком порядке что распылять
// console.log(c); //  {x: 0, y: 2, z: 3}
// x: 0, потому что в обьекте свойство может быть только одно, сначала распылилось вот так { x: 1, y: 2 }, потом следует вторая 
// распыление { x: 0, z: 3 } и выходит что свойство обьекта х уникальное и  перезаписалось значение 1 на 0 

// Современный синтаксис
const a = { x: 1, y: 2 };
const b = { x: 0, z: 3 };
// const c = {
//     ...a,
//     ...b
// };
// console.log(c);

// Порядок распыления в итоге влияет на конечное значения одинаковых свойств

const c = {
    ...a,
    x: 5,
    ...b,
    y: 20,
};
console.log(c); // {x: 0, y: 20, z: 3}

// Пример распыления в настройках сайта:
const defaultSettings = {
  theme: 'light',
  showNotifications: true,
  hideSidebar: false,
};

const userSettings = {
  showNotifications: false,
  hideSidebar: true,
};

const finalSettings = {
  ...defaultSettings,
  ...userSettings,
};

console.log(finalSettings);