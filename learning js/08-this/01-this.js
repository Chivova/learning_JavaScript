/*
 * Функция это частный случай объекта -> ССЫЛОЧНЫЙ ТИП
 */

// Функция это сложный тип, когда мы куда-то  передаем функцию, мы передаем не копию, а буквально ссылку

// console.log('[] === []: ', [] === []); // ---> false
// console.log('{} === {}: ', {} === {}); // ---> false
// console.log(
//     'function() {} === function() {}: ',
//     function () {} === function () {}, // ---> false
// );

// const fnA = function () {
//     console.log('hello');
// };

// const fnB = fnA; // буквально в fnB передаем ссылку на fnA
// console.log('fnB === fnA: ', fnB === fnA); // ---> true ( ссылки на один и тот же обьект)

/*
 * Контекст (this)
 *    - Где и как была объявлена функция НЕ ИМЕЕТ НИКАКОГО ВЛИЯНИЯ на контекст.
 *    - Контекст определяется В МОМЕНТ ВЫЗОВА ФУНКЦИИ, если он не привязан явно.
 */

/*
 * Как метод объекта. В контексте объекта.
 */

// const user = {
//     tag: 'Mango',
//     showTag() {
//         console.log('showTag -> this', this);
//     },
// };

// user.showTag(); // функция showTag() вызывается в контексте обьекта user, this будет ссылатся на этот обьект (user),
//поэтому в методе обьекта мы используем не имя самого обьекта а ключевое слово this
/*
 * Вызов без контекста
 * - В строгом режиме = undefined
 * - Не в строгом режиме = window
 */

// const foo = function () {
//     console.log('foo -> this', this);
// };

// foo(); // если вызвать функцию без какого-то обьекта в 'строгом режиме' получим undefined, не в строгом режиме window

/*
 * Как метод объекта, но объявлена как внешняя функция.
 * В контексте объекта.
 *
 * Не важно где обьявлена функция с словом this, важно как ее вызвать, потому что значение this определяется в момент вызова
 */
const showTag = function () {
  console.log("showTag -> this", this);
  console.log("showTag -> this.tag", this.tag);
};

// showTag(); // ---> undefined

const user = {
  tag: "Mango",
};

user.showUserTag = showTag; // создается в обьект user свойство с именем showUserTag, в которую записываем ссылку на функцию
// showTag(). showUserTag получится как метод обьекта user

user.showUserTag(); // вызываем этот метод в контексте user, в этом методе лежит ссылка на функциюю showTag и на этой строке
// определяется значение ключевого слова this

/*
 * Вызов без контекста, но объявлена как метод объекта.
 НЕ ВАЖНО как ты обьявил функцию(методолм обьекта, внешняя), ВАЖНО как ее ВЫЗВАТЬ
 */

// const user = {
//     tag: 'Mango',
//     showTag() {
//         console.log('showTag -> this', this);
//         console.log('showTag -> this.tag', this.tag);
//     },
// };

// user.showTag();

// const outerShowTag = user.showTag; // во внешней  переменной присвоится ссылка на функцию showTag()

// outerShowTag(); // ---> undefined, нет привязки к контексту обьекта

/*
 * Контекст в callback-функциях
 */
