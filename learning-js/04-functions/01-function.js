/*
 * Функции
 * - Функциональные выражения
 * - Аргументы и параметры
 * - Возврат значения
 */

 
// Обьявление функции - происходит через переменную(присваиваем). Функция сохраняется в памяти, а потом где-то вызывается
// Имя функции должно отвечать на  вопрос что делает, в примере add(что - то добавляет)                                                                                                    
// const add = function () { // ----> Обьявление функции, !!!!!!!!!!!!!!!после обьявления функии нужно ставить точку с запятой!!!!!!!!!!!!!!!                                                                                                                                                                                                       
//     // ...... тело функции
//     console.log('Выполняется функция add');
// };    

// // вызов функции происходит ниже по коду     
// add();  // ----> вызов, в () передаются аргументы
                      
// function () {}; -----> в () передаются пераметры   
// add(); -----> в () передаются аргументы

// const add = function (x, y) {  // x, y ---> параметры (доступны только в теле функции)
//      console.log('Выполняется функция add');
//     console.log(x);
//     console.log(y);
// };   
 
// add(5, 7);   // 5,7  ---> аргументы
// // При каждом вызове параметры не конфликтуют и могут быть разными на каждом вызове функции    
// add(20, 15);
// add(40, 50);

// Что нужно от функции - вызвать, что - то ей передать, и в том месте где ее вызвали получить что-то  обратно (результат ее работы)
// для что бы что - то вернуть из функции есть директива return 
 
const add = function (x, y) {
    console.log('Выполняется функция add');

    console.log(x);
    console.log(y);

    return x + y;
};

const r1 = add(5, 7);
console.log('Результат работы  функции: ', r1);  // В переменную r1 записывается результат вызова функции add (результат return)
const r2 = add(20, 15);
console.log('Результат работы  функции: ', r2);
const r3 = add(40, 50);
console.log('Результат работы  функции: ', r3);

// там где поставить return прекращается работа функции, если его не поставить интерпретат сделает это за нас и вернется значение undefined
// const fn = function () {
//     console.log(1);

//     console.log(2);
//     // return 55;                                            
//     console.log(3);
// };

// console.log('Результат функции : ', fn());

const fn = function (value) {
    if (value < 50) {
        return 'Число меньше чем 50'
    }
    return 'Число больше чем 50'
};

console.log(fn(20));
console.log(fn(110));

/*
 * - Стек вызовов на видео про функции с 00:26:12	
 * - Stack trace и поиск ошибок на видео 00:37:28
 */
const fnA = function () {
    console.log('Выполняется функция A');
    
    fnB();
};

const fnB = function () {
  console.log('Выполняется функция B');
};

const fnC = function () {
  console.log('Выполняется функция C');
};

// console.log('Лог перед вызовом функции A');

fnA();

// console.log('Лог после вызова функции A');

// console.log('Лог перед вызовом функции B');
fnB();
// console.log('Лог после вызова функции B');

// console.log('Лог перед вызовом функции C');
fnC();
// console.log('Лог после вызова функции C');